import java.util.Scanner;


public class WordGame {

	public static void main(String[] args) {
		
		String puller, word;
		int rows=0, cols=0 , check=0, step =0, occurs=0 , wordLength , wordStep=0, i,n,j=0,k=0;
		Scanner input = new Scanner(System.in);
		
		System.out.println( "Enter number of rows:" );
		rows = input.nextInt();
		System.out.println( "Enter number of colums:" );
		cols = input.nextInt();
		
		
		char[][] table = new char[rows][cols]; 
		
		
		// fill array with data
		while(check != rows){
			
			System.out.println("Enter the chars in row " + (check+1));
			puller = input.next();
			
			while(step != cols){
				
				table[check][step] = puller.charAt(step);
				step++;
				
			}
			
			step=0;
			check++;
		}
		
		System.out.println( "Enter the word:" );
		word = input.next();
		wordLength = word.length();
		
		
		
		for( i =0; i<rows ; i++){     
			// from left to right
			for( n= 0 ; n<cols; n++){
				 if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 n++;
						 wordStep++;
						 if(n>cols-1){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }
			}
			//from right to left
			for(n = (cols-1) ; n>=0; n--){
				 if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 n--;
						 wordStep++;
						 if(n<0){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }
			}	
		}
		
		
		for(n=0 ; n<cols ;n++){
			//from top to bottom
			for(i=0; i<rows;i++){
				
				if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 i++;
						 wordStep++;
						 if(i>rows-1){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }	
			}
			//from bottom  to top
           for(i=rows-1; i>=0 ;i--){
				
				if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 i--;
						 wordStep++;
						 if(i<0){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }
			}
		}
		
		
		
		//across left to right
		j=rows-1;
		while(j>=0){
			i=j;
			n=0;
			while(i<rows && n<cols){
				
				if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 i++;
						 n++;
						 wordStep++;
						 if(i>rows-1 || n>cols-1 ){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }
				i++;
				n++;
			}
			
			if(j==0){
				k=1;
				while(k<cols){
					n=k;
					i=0;
					while(i<rows && n<cols){
						if(word.charAt(0)==table[i][n]){
							 
							 while(word.charAt(wordStep)==table[i][n]){
								 i++;
								 n++;
								 wordStep++;
								 if(i>rows-1 || n>cols-1 ){
									 break;
								 }
								 if(wordStep==(wordLength-1)){
									 occurs++;
									 break;
								 }
							 }
							 wordStep=0;
						 }
						i++;
						n++;
					}
					k++;
				}
				
			}
			j--;
		}
		
		//across right to left
		
		j=rows-1;
		while(j>=0){
			i=j;
			n=cols-1;
			while(i<rows && n>=0){
				
				if(word.charAt(0)==table[i][n]){
					 
					 while(word.charAt(wordStep)==table[i][n]){
						 i++;
						 n--;
						 wordStep++;
						 if(i>rows-1 || n<0 ){
							 break;
						 }
						 if(wordStep==(wordLength-1)){
							 occurs++;
							 break;
						 }
					 }
					 wordStep=0;
				 }
				i++;
				n--;
			}
			
			if(j==0){
				k=cols-2;
				while(k>=0){
					n=k;
					i=0;
					while(i<rows && n>=0){
						if(word.charAt(0)==table[i][n]){
							 
							 while(word.charAt(wordStep)==table[i][n]){
								 i++;
								 n--;
								 wordStep++;
								 if(i>rows-1 || n<0 ){
									 break;
								 }
								 if(wordStep==(wordLength-1)){
									 occurs++;
									 break;
								 }
							 }
							 wordStep=0;
						 }
						i++;
						n--;
					}
					k--;
				}
				
			}
			j--;
		}
		
		System.out.println(occurs);
		input.close();
	}

}
