package recPack;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;


import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;



public class RecTest {
	
	private static final String depPath = "/home/sparks/workspace-java/PackageManeger/packages/dependencies.json";
	private static final String packsPath = "/home/sparks/workspace-java/PackageManeger/packages/all_packages.json";
	private static final String installDir = "/home/sparks/workspace-java/PackageManeger/packages/installed_modules/";
	
	public static void main(String[] args) {
		
		try{
			
			File installFile ;
			int pSize;
			
			// read and parse to objects the json files
			FileReader depReader = new FileReader(depPath);
			JSONParser depParser = new JSONParser();
			JSONObject depObject = (JSONObject) depParser.parse(depReader);
			
			FileReader packsReader = new FileReader(packsPath);
			JSONParser packsParser = new JSONParser();
			JSONObject packsObject = (JSONObject) packsParser.parse(packsReader);
			
			// get a String from the JSON object
			String projectName = (String) depObject.get("projectName");
			System.out.println("The project name is: " + projectName);
			
	
			// get an array from the JSON object
			JSONArray deps= (JSONArray) depObject.get("dependencies");
			
			for(int i=0; i<deps.size(); i++){
				
				System.out.println("Installing "+deps.get(i));
				
				installFile= new File (installDir+deps.get(i));
				
				if(installFile.exists()) {
					
				    System.out.print(deps.get(i) +" is already installed\n");
				
				}else{
				
					JSONArray packs= (JSONArray) packsObject.get(deps.get(i)); 
					
					pSize=packs.size();
					
					if(pSize>0){
						
						System.out.println("In order to install "+ deps.get(i) + ",we need :");
						
					    for(int j=0;j<pSize;j++){
							
					    	System.out.println(packs.get(j));
						
					    }
					    
						pCheck(packs,packsObject,(String)deps.get(i),installFile);
						
					}
					
					
					installFile= new File (installDir+deps.get(i));
					installFile.createNewFile();
					System.out.println("Installing "+ deps.get(i));
				}
			}
			
		}catch (FileNotFoundException ex) {
			ex.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		} catch (ParseException ex) {
			ex.printStackTrace();
		} catch (NullPointerException ex) {
			ex.printStackTrace();
		}
		
	}
	
	public static void pCheck(JSONArray pack,JSONObject packObj,String name,File insFile) { 
		
		
			
			for(int i=0 ; i<pack.size() ; i++){
				
				JSONArray checkArr = (JSONArray) packObj.get(pack.get(i));
				
				if(checkArr.size()>0){
					
					System.out.println("In order to install "+ pack.get(i) + ",we need :");
					
				    for(int j=0;j<checkArr.size();j++){
						
				    	System.out.println(checkArr.get(j));
					
				    }
				
					pCheck(checkArr,packObj,(String)pack.get(i),insFile);
					
					/*System.out.println("Installing: "+ (String) pack.get(i));
					
					insFile= new File (installDir+name);
					
					if(insFile.exists()) {
						
					    System.out.print(name + " is already installed\n");
					    
					}else{
						
						try{
							
							insFile.createNewFile();
							System.out.println(name+ " was installed!");
							
						}catch (IOException ex) {
							ex.printStackTrace();
						}
						
					}*/
					
					
				}
				else{
					
					System.out.println("Installing: "+ (String) pack.get(i));
					
					insFile= new File (installDir+name);
					
					if(insFile.exists()) {
						
					    System.out.print(name + " is already installed\n");
					    
					}else{
						
						try{
							
							insFile.createNewFile();
							System.out.println(name+ " was installed!");
							
						}catch (IOException ex) {
							ex.printStackTrace();
						}
						
					}
					
				}					
			
			
		}
		
	} 
	
}
